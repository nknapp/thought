
## Usage


The simplest usage is just to run `thought` from your project root directory.
In the default configuration, this will generate a `README.md` from the information in the `package.json`.

Consider the following example 

{{{dirtree 'examples/example-project' '!**/README.md'}}}

and have a look at the files
[index.js](examples/example-project/index.js),
[examples/example.js](examples/example-project/examples/example.js) and
[examples/example.js](examples/example-project/examples/example.js),
[LICENSE.md](examples/example-project/LICENSE.md),
[package.json](examples/example-project/package.json)

Thought will render information from `package.json`, include the `exampeles/examples.js`, 
execute the `examples/example.js` file and include the process-output and reference the `LICENSE.md`.

The resulting `README.md` can be viewed [here](examples/example-project/README.md)


### CLI options

Calling `thought --help` will print a command-line reference:

{{{exec 'bin/thought.js --help'}}}

## Calling `thought` from node.

{{{example 'examples/javascript-usage.js' 'txt'}}}

## Using `thought` as version-script for npm

npm supports a `version` script from version 2.13.0 on. This script
is called when invoking [npm version ...](https://docs.npmjs.com/cli/version)
after bumping the version number but prior to commiting the change.

Using 

```json
{
  "scripts": {
    "version": "thought -a"
  }
}
```

in your `package.json` will cause your documentation to be automatically updated
and commited with the version-commit.

This is especially helpful when using the helper `withPackageOf` to include links to files
in your github repository (since these links will point to the commit with the correct
version tag).
