# Basic Usage

The most basic way to use Thought is to go into your directory of your `package.json` and type

```bash
npm -g install thought
thought run -a
```

Thought will then create the files `README.md` and `CONTRIBUTING.md` with reasonable default texts for Open-Source
projects in JavaScript that are hosted on http://npmjs.com. 

### Examples

Thought can be used just as-is or in a more sophisticated fashion. The more work you put in, the better 
the documentation that comes out. The following example show the different levels of details:

* [The first example](docs/example-project-1-simple.md) shows the generated documentation for
  a very simple, newly generated npm-package.
* [The second example-project](docs/example-project-2-example-license-jsdoc-badges.md) 
  demonstrates the following features:
  * an example program in the README
  * a link to a LICENSE-file
  * a JSDoc-Reference of the main file
  * badges for npm, travis, coveralls and greenkeeper
* [The third example-project](docs/example-project-3-templates-partials-helpers-preprocessor.md) shows how to
  * override contents with custom content (using custom partials and custom templates)
  * create new files by adding templates
  * add custom helpers that can be called from within templates and partials
  * add a custom preprocessor to modify the input data (i.e. the `package.json` and
    the configuration)
* [The fourth example-project](docs/example-project-4-writing-plugins.md) demonstrates
  how to bundle customizations into a plugin that can be reused and published on npm.
* **The (probably) largest example** is Thought itself. All the documentation is generated by Thought. 
  In fact, some of the features like the `ignore`-option of the `\{{dirTree}}`-helper were added in order to
  generate the documentation properly. Have a look at the `.thought`-directory and learn what is possible.

### CLI options

Calling `thought --help` will print a command-line reference:

{{{exec 'bin/thought.js --help'}}}

#### `thought init`: Using Thought as version-script for npm

`thought init` will install `thought run -a` as `version` script in your `package.json`.
This will run thought every time you bump the package-version using `npm version`. 
The updated documenation will be commited along with the version bump.

This is especially helpful when using the helper `withPackageOf` to include links to files
in your github repository (since these links then include the version tag on github).

### `thought up-to-date`: Using Thought as pre-push hook.

Along with the library {{npm 'husky'}}, Thought can be used as pre-push hook to prevent missing
README updates. When you change things that would otherwise update the documentation (like an example),
it can easily happen that you push those changes without running Thought first.

You can prevent this from happening by using `husky` and a `prepush` script

```json
// Edit package.json
{
  "scripts": {
    "prepush": "thought up-to-date"
  }
}
```

The command `thought up-to-date` runs Thought without writing any files, but it checks if any of the
files that would have been written, would have been changed by the write. If this is the case, it exits with a
non-zero exit-code and prints an error message.

*Attention: This will not work properly if the output of examples includes variable parts such as the current timestamp or local wheather conditions*


### Calling `thought` from node.

{{{example 'examples/javascript-usage.js' 'txt'}}}





                                                 