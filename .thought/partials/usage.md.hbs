
## Usage


The simplest usage is just to run `thought` from your project root directory.
In the default configuration, this will generate a `README.md` from the information in the `package.json`.

Consider the following example 

{{{dirtree 'examples/example-project' '!**/README.md'}}}

and have a look at the files
[index.js](examples/example-project/index.js),
[examples/example.js](examples/example-project/examples/example.js) and
[examples/example.js](examples/example-project/examples/example.js),
[LICENSE.md](examples/example-project/LICENSE.md),
[package.json](examples/example-project/package.json)

Thought will render information from `package.json`, include the `exampeles/examples.js`, 
execute the `examples/example.js` file and include the process-output and reference the `LICENSE.md`.

The resulting `README.md` can be viewed [here](examples/example-project/README.md)


### CLI options

Calling `thought --help` will print a command-line reference:

{{{exec 'bin/thought.js --help'}}}

## Calling `thought` from node.

{{{example 'examples/javascript-usage.js' 'txt'}}}

## Using `thought` as version-script for npm

npm supports a `version` script from version 2.13.0 on. This script
is called when invoking [npm version ...](https://docs.npmjs.com/cli/version)
after bumping the version number but prior to commiting the change.

Using `thought init` you can install scripts for `version` and `preversion` in your package.json 
that will run `thought run -a` on every version bump. This will include the updated documenation
in the same commit that contains the version bump. Furthermore, if you (or any other contributor 
of your module) is using npm prior to version 2.13.0. The preversion-script will fail.

This is especially helpful when using the helper `withPackageOf` to include links to files
in your github repository (since these links include the version tag on github).

