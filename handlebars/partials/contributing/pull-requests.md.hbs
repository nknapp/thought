## Workflow for Pull-Requests

You can create a pull-request at any time and for any reason. However, there are some rules that you should consider.
These rules are defined to maitain the quality of the package to keep you from wasting your time (in case your PR does not 
get merged)

### Features

* New Features should be discussed, before they are accepted. If you have a feature-request, you might want to
open an issue first in order to clarify whether the feature is wanted or not.
* You can then create a PR for discussing implementation details. Multiple commits can be added to the PR as he 
discussing goes on.
* The following prerequisites must be fulfilled, befor a PR is merged: 
   * All unit-tests must pass. 
   * The code-coverage must not decrease. Any new code must be covered by unit-tests.
   * The code-style must be maintained.
   * The documentation must be updated to include the new feature. Examples and API-references should be updated.
   * Backward-compatibility should be maintained as long as possible.
   * The git-diff of the PR should be as small as possible. Unrelated fixes of code-style should be 
     handled in a separate PR.
* When the PR is ready to be merged, a "squash & merge" will be performed in order to combine all commits of the PR-branch
  into a single commit.

This is a lot of work. There may be cases, where a pull-request is accepted even if not all of the prerequisites are fulfilled. 
But those should be exceptions.

### Bugfixes

The rules for bugfixes are not a strict as for new features. Generally, pull-requests for bugfixes are appreciated, 
even if they come without a regression test. However, if you can provide a test, you should do so. Still, test coverage 
should not decrease.

### Documentation issues

If you think the documentation is hard-to-understand or plainly wrong, please open a PR to suggest changes. Please 
be aware that documentation within this project is generated by {{npm 'thought'}}, so don't make changes to the `README.md`.
The best way to work with the documentation is the {{npm 'thought-dev'}}-tool.

If you want to perform a larger rewrite of the documentation, you might want to open an issue to check if the rewrite
is appreciated.




